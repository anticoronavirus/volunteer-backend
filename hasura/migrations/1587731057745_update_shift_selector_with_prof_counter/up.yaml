- args:
    cascade: false
    read_only: false
    sql: "CREATE OR REPLACE FUNCTION public.shift_selector(\n_hospital_id uuid DEFAULT
      NULL::uuid,\nprofessions uuid[] DEFAULT '{}'::uuid[]\n)\n RETURNS SETOF vshift\n
      LANGUAGE sql\n STABLE\nAS $function$ \nSELECT\n    period.\"date\",\n    period.start,\n
      \   period.\"end\",\n    count(DISTINCT period.hospital_id)::integer AS hospitalscount,\n
      \   sum(period.demand)::integer AS demand,\n    (((sum(period.demand))::numeric
      - sum(period.subs) - sum(period.reserved)))::integer AS placesavailable,\n    gen_random_uuid()
      as uid\n    FROM\n    (select\n        (days.date_)::date as \"date\",\n        start,\n
      \       \"end\",\n        hospital_id,\n      period_demand.demand,\n      period_demand.profession_id,\n
      \       CASE WHEN shortname = 'Коммунарка' THEN period_demand.demand\n             ELSE
      0\n        END AS reserved,\n        COALESCE(vs_stat.subs, 0) as subs\n     FROM
      period\n     INNER JOIN hospital ON hospital.uid = hospital_id\n     RIGHT JOIN
      period_demand ON period_id = period.uid\n     LEFT JOIN generate_series(\n         (CURRENT_DATE)::timestamp
      without time zone,\n         (CURRENT_DATE + '14 days'::interval),\n         '1
      day'::interval) days(date_) ON (true)\n     LEFT JOIN (select count(volunteer_id)
      as subs,\n                      period_demand_id,\n                      volunteer_shift.\"date\"\n
      \               from volunteer_shift\n                group by period_demand_id,
      volunteer_shift.\"date\") as vs_stat\n                ON vs_stat.\"date\" =
      (days.date_)::date AND\n                  vs_stat.period_demand_id = period_demand.uid)
      period\n  WHERE\n    CASE WHEN _hospital_id IS NULL\n      THEN TRUE\n      ELSE
      period.hospital_id = _hospital_id\n    END AND\n    CASE WHEN array_length(professions,
      1) IS NULL\n      THEN TRUE\n      ELSE profession_id = ANY(professions)\n    END\n
      \ GROUP BY period.\"date\", period.start, period.\"end\"\n  ORDER BY period.\"date\",
      period.start;\n  $function$;"
  type: run_sql
